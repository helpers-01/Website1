name: Deploy to Production

on:
  push:
    branches: [ main, production ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

env:
  NODE_VERSION: '18'
  SUPABASE_ACCESS_TOKEN: ${{ secrets.SUPABASE_ACCESS_TOKEN }}
  SUPABASE_DB_PASSWORD: ${{ secrets.SUPABASE_DB_PASSWORD }}
  FLY_API_TOKEN: ${{ secrets.FLY_API_TOKEN }}
  VERCEL_TOKEN: ${{ secrets.VERCEL_TOKEN }}

jobs:
  # Test and Build
  test:
    name: Run Tests
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        
    - name: Install dependencies
      run: |
        npm ci
        npm ci --workspace client
        npm ci --workspace server
        
    - name: Run linting
      run: |
        npm run lint --workspace client
        npm run lint --workspace server
        
    - name: Run type checking
      run: |
        npm run build --workspace client
        npm run build --workspace server
        
    - name: Run tests
      run: |
        npm test --workspace client -- --watchAll=false
        npm test --workspace server
      continue-on-error: true

  # Security Scan
  security:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Run security audit
      run: |
        npm audit --audit-level=high
        npm audit --audit-level=high --workspace client
        npm audit --audit-level=high --workspace server
        
    - name: Run CodeQL Analysis
      uses: github/codeql-action/init@v3
      with:
        languages: typescript, javascript
        
    - name: Perform CodeQL Analysis
      uses: github/codeql-action/analyze@v3

  # Deploy Backend to Fly.io
  deploy-backend:
    name: Deploy Backend to Fly.io
    runs-on: ubuntu-latest
    needs: [test, security]
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/production'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Fly CLI
      uses: superfly/flyctl-actions/setup-flyctl@master
      
    - name: Deploy to Fly.io
      run: |
        cd server
        flyctl deploy --remote-only
      env:
        FLY_API_TOKEN: ${{ secrets.FLY_API_TOKEN }}

  # Deploy Frontend to Vercel
  deploy-frontend:
    name: Deploy Frontend to Vercel
    runs-on: ubuntu-latest
    needs: [test, security]
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/production'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        
    - name: Install Vercel CLI
      run: npm install --global vercel@latest
      
    - name: Pull Vercel Environment Information
      run: vercel pull --yes --environment=production --token=${{ secrets.VERCEL_TOKEN }}
      working-directory: ./client
      
    - name: Build Project Artifacts
      run: vercel build --prod --token=${{ secrets.VERCEL_TOKEN }}
      working-directory: ./client
      
    - name: Deploy Project Artifacts to Vercel
      run: vercel deploy --prebuilt --prod --token=${{ secrets.VERCEL_TOKEN }}
      working-directory: ./client

  # Database Migrations
  migrate:
    name: Run Database Migrations
    runs-on: ubuntu-latest
    needs: [test, security]
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/production'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Run database migrations
      run: node scripts/migrate.js
      env:
        SUPABASE_URL: ${{ secrets.SUPABASE_URL }}
        SUPABASE_SERVICE_ROLE_KEY: ${{ secrets.SUPABASE_SERVICE_ROLE_KEY }}

  # Health Check
  health-check:
    name: Production Health Check
    runs-on: ubuntu-latest
    needs: [deploy-backend, deploy-frontend]
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/production'
    
    steps:
    - name: Check Backend Health
      run: |
        sleep 30  # Wait for deployment to be ready
        curl -f https://your-production-api-domain.com/health || exit 1
        
    - name: Check Frontend
      run: |
        curl -f https://your-production-domain.com || exit 1

    - name: Notify deployment success
      run: |
        echo "ðŸŽ‰ Deployment successful!"
        echo "Frontend: https://your-production-domain.com"
        echo "Backend API: https://your-production-api-domain.com"
        echo "Health Check: https://your-production-api-domain.com/health"
